metadata 
{
	definition(name: "MQTT Switch", namespace: "ukusa", author: "Kevin Hawkins",importUrl: "https://raw.githubusercontent.com/xAPPO/MQTT/alpha4a/MQTT%20Switch%20driver")
	{
		capability "Switch"
		//capability "Refresh"
		capability "Telnet"  // temporary kludge
		
		command "setStateTopic", ["String"]
		command "setStateCmdTopic", ["String"]
		command "setType",["String"]
		command "on"
		command "off"
		command "toON"
		command "initialize"
		command "toOFF"
		command "setStateType", ["String", "String"]
		command "getStateTopics", ["String"]
        command "upgrade"
		
		attribute "MQTT","string"
		attribute "stateON", "string"
		attribute "stateOFF", "string"
        attribute "stateTopic", "strinG"
        attribute "cmdTopic","string"
	}
}
preferences{
	section ("... not required for automatically discovered devices ")  // TODO does not display
	{
		input name: "TopicState", type: "text", title: "State topic", description: "", required: false, displayDuringSetup: true
		input name: "TopicCmd", type: "text", title: "Command topic", description: "", required: false, displayDuringSetup: true
		input name: "StateON", type: "text", title: "State on is..", description: "e.g. &nbsp ON &nbsp On &nbsp true &nbsp 1 &nbsp yes", required: false, displayDuringSetup: true
		input name: "StateOFF", type: "text", title: "State off is..", description: "e.g. &nbsp OFF &nbsp Off &nbsp false &nbsp 0 &nbsp no", required: false, displayDuringSetup: true
	}
}

   // TODO consider making MQTT devices driver children again

def installed()
{
	initialize()
}


def updated()
{
	if (state.type==null||state.type=="manual") 
	if (settings?.TopicState != null) {
		state.type = "manual"
		//state.stateTopic =settings?.TopicState
        sendEvent(name: "stateTopic", value:settings?.TopicState,isStateChange: true)
		device.deviceNetworkId = 'MQTT:Internal '+ settings?.TopicState
        if (settings?.TopicCmd != null) {
            //state.commandTopic=settings?.TopicCmd
            sendEvent(name: "cmdTopic", value:settings?.TopicCmd,isStateChange: true)
		if (settings?.StateON != null){
			//state.stateTypeON = settings?.StateON
			sendEvent(name: "stateON", value: settings?.StateON,isStateChange: true)
		}
		if (settings?.StateOFF != null){ 
		//state.stateTypeOFF = settings?.StateOFF
		sendEvent(name: "stateOFF", value: settings?.StateOFF,isStateChange: true)
	    }
	//if (settings?.TopicLevel != null) state.LevelTopic = settings?.StateON
	//if (settings?.TopicCmdLevelCmd != null) state.LevelCmdTopic = settings?.StateOFF
	    }
	initialize()
    }
}

def initialize()
{
	refresh()
	sendEvent(name: "MQTT", value: "switch",isStateChange: true)
}


def parse(String description)  // shouldn't get called
{
	log.warn "Msg: Description is $description"
}

def on() {
	sendEvent(name: "switch", value: "on", isStateChange: true)
	//parent.sendPayload(state.commandTopic,"true")
	if (state.type=="manual") sendEvent(name: "changeState", value: device.currentStateON,  data: [topic: device.currentCmdTopic],isStateChange: true)
	else parent.sendPayload(device.currentCmdTopic, device.currentStateON) 
}

def off() {
	sendEvent(name: "switch", value: "off", isStateChange: true)
	//parent.sendPayload(state.commandTopic,"false")
	if (state.type=="manual") sendEvent(name: "changeState", value: device.currentStateOFF,  data: [topic:  device.currentCmdTopic],isStateChange: true)
	else parent.sendPayload(state.commandTopic,device.currentStateOFF) 

}

def toON() {  // avoids publish loop
	sendEvent(name: "switch", value: "on", isStateChange: true)
}

def toOFF() {  // avoids publish loop
	sendEvent(name: "switch", value: "off", isStateChange: true)
}

def setStateType (stateOFF,stateON)  //  now write attributes directly ??
    {
    //state.stateTypeOFF = stateOFF
    //state.stateTypeON = stateON
        sendEvent(name: "stateOFF", value: stateOFF,isStateChange: true)
        sendEvent(name: "stateON", value:stateON,isStateChange: true)
}

def refresh()
{
	// Maybe refresh the device by resubscribing to the MQTT broker ?
	//parent.sendDeviceEvent(device.deviceNetworkId, "refresh")
}

def getStateTopics()
{
	// needed to create DNI of device to match MQTT state changes
	sendEvent(name: "topic", value: device.currentStateTopic,isStateChange: true)
    // This doesnt currently create a DNI entry should it ??  TODO CHECK
    
    log.error "GETSTATETOPICS() MUST DEPRECATE CALL TO THIS AS WILL BREAK"
}

def setStateTopic(String topic)
{
	//state.stateTopic=topic
    sendEvent(name: "stateTopic", value:topic,isStateChange: true)
}

def setType(String system)
{
	state.type = system
}

def setStateCmdTopic(String topic)
{
	//state.commandTopic=topic
    sendEvent(name: "cmdTopic", value:topic,isStateChange: true)
}

def upgrade() {
  log.warn "MQTT switch upgrade already done"
   return
   sendEvent(name: "MQTT", value: "switch",isStateChange: true)
   sendEvent(name: "stateTopic", value:state.stateTopic,isStateChange: true)
       state.remove("stateTopic")
   sendEvent(name: "cmdTopic", value:state.commandTopic,isStateChange: true)
       state.remove("commandTopic")
   sendEvent(name: "stateON", value:state.stateTypeON,isStateChange: true)
       state.remove("stateTypeON")
   sendEvent(name: "stateOFF", value:state.stateTypeOFF,isStateChange: true)
       state.remove("stateTypeOFF")
    log.warn "MQTT switch upgraded"
}
    


